struct Data
{
    float2 position;
    float sqrRadius;
};

RWTexture2D<float> _TextureOut;
StructuredBuffer<Data> _Datas;
int _DataCount;
int _TextureSize;

#pragma kernel main

float sqrMagnitude(float2 vec)
{
    return dot(vec, vec);

}
     
[numthreads(8,8,1)]                            
void main (uint2 id : SV_DispatchThreadID)
{
    // Clear previous result
    _TextureOut[id.xy] = 0.f;

    // Loop on all entities to define pixel color with influence
    for (int i = 0; i < _DataCount; ++i)
    {
        const Data data = _Datas[i];        
        const float sqrDist = sqrMagnitude(data.position - id.xy / (float)_TextureSize);
        const float distRatio = sqrDist / data.sqrRadius;
        const float isInside = step(distRatio, 1.f);
        const float colorValue = isInside * (1.f - distRatio);
        _TextureOut[id.xy] += colorValue;
    }

    // Saturate
    _TextureOut[id.xy] = min(_TextureOut[id.xy], 1.f);
}
